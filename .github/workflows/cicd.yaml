name: CloudCurio CI/CD Pipeline

on:
  push:
    branches: [ main, develop, release/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  # Code Quality Checks
  code-quality:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10, 3.11]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r crew/requirements.txt
        pip install -r config_editor/requirements.txt
        pip install -r ai_tools/requirements.txt
        pip install -r feature_tracking/requirements.txt
        pip install flake8 black mypy
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with Black
      run: |
        black --check .
    
    - name: Type checking with MyPy
      run: |
        mypy --package ai_tools
        mypy --package crew
        mypy --package sysmon
        mypy --package config_editor
        mypy --package feature_tracking

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security scanning tools
      run: |
        pip install bandit safety
    
    - name: Run Bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || echo "Bandit scan completed"
    
    - name: Run Safety dependency scan
      run: |
        safety check -r crew/requirements.txt --json > safety-report.json || echo "Safety scan completed"
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Unit Testing
  unit-tests:
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        python-version: [3.10, 3.11]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r crew/requirements.txt
        pip install -r config_editor/requirements.txt
        pip install -r ai_tools/requirements.txt
        pip install -r feature_tracking/requirements.txt
        pip install pytest pytest-cov pytest-asyncio
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=. --cov-report=xml --cov-report=term
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Integration Testing
  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r crew/requirements.txt
        pip install -r config_editor/requirements.txt
        pip install -r ai_tools/requirements.txt
        pip install -r feature_tracking/requirements.txt
        pip install pytest pytest-cov pytest-asyncio
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

  # AI Code Review with Ollama
  ai-code-review:
    runs-on: ubuntu-latest
    needs: code-quality
    if: github.event_name == 'pull_request'
    
    services:
      ollama:
        image: ollama/ollama:latest
        ports:
          - 11434:11434
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 2
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r crew/requirements.txt
        pip install -r config_editor/requirements.txt
        pip install -r ai_tools/requirements.txt
        pip install -r feature_tracking/requirements.txt
    
    - name: Pull AI model for code review
      run: |
        curl -X POST http://localhost:11434/api/generate -d '{"model": "llama3", "prompt": "Hello"}' || echo "Model pull initiated"
    
    - name: Run AI code review
      run: |
        python scripts/ai_code_review.py
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        OLLAMA_HOST: http://localhost:11434
    
    - name: Upload AI review report
      uses: actions/upload-artifact@v3
      with:
        name: ai-code-review-report
        path: ai_code_review_report.md

  # Build Packages
  build-packages:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build pip package
      run: |
        python -m build
    
    - name: Upload pip package artifacts
      uses: actions/upload-artifact@v3
      with:
        name: pip-packages
        path: dist/
    
    - name: Build Docker images
      run: |
        docker build -f Dockerfile.mcp -t cbwinslow/cloudcurio-mcp:latest .
        docker build -f Dockerfile.config-editor -t cbwinslow/cloudcurio-config-editor:latest .
    
    - name: Upload Docker image artifacts
      uses: actions/upload-artifact@v3
      with:
        name: docker-images
        path: |
          Dockerfile.mcp
          Dockerfile.config-editor

  # Release Management
  release:
    runs-on: ubuntu-latest
    needs: [build-packages, security-scan]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      packages: write
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download pip package artifacts
      uses: actions/download-artifact@v3
      with:
        name: pip-packages
        path: dist/
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: CloudCurio ${{ github.ref_name }}
        body: |
          ## CloudCurio Release ${{ github.ref_name }}
          
          This release includes:
          - AI provider management system
          - MCP server for AI crew management
          - System monitoring (SysMon)
          - Web-based configuration editor
          - Terminal integration
          - Open WebUI integration
          - Comprehensive documentation
          - Feature tracking system
          - Agentic platform
          
          For installation instructions, see our [README](https://github.com/cbwinslow/cloudcurio/blob/main/README.md).
        draft: false
        prerelease: false
        files: |
          dist/*
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        pip install twine
        twine upload dist/*

  # Docker Hub Release
  dockerhub-release:
    runs-on: ubuntu-latest
    needs: release
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: cbwinslow/cloudcurio-mcp,cbwinslow/cloudcurio-config-editor
        tags: |
          type=ref,event=tag
          type=raw,value=latest
    
    - name: Build and push MCP Server
      uses: docker/build-push-action@v4
      with:
        context: .
        file: Dockerfile.mcp
        platforms: linux/amd64,linux/arm64
        push: true
        tags: cbwinslow/cloudcurio-mcp:${{ github.ref_name }},cbwinslow/cloudcurio-mcp:latest
        labels: ${{ steps.meta.outputs.labels }}
    
    - name: Build and push Config Editor
      uses: docker/build-push-action@v4
      with:
        context: .
        file: Dockerfile.config-editor
        platforms: linux/amd64,linux/arm64
        push: true
        tags: cbwinslow/cloudcurio-config-editor:${{ github.ref_name }},cbwinslow/cloudcurio-config-editor:latest
        labels: ${{ steps.meta.outputs.labels }}

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [release, dockerhub-release]
    if: always()
    
    steps:
    - name: Notify on Slack
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        author_name: CloudCurio CI/CD
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Notify on Discord
      if: failure()
      uses: Ilshidur/action-discord@master
      with:
        args: 'CloudCurio CI/CD pipeline has {{ EVENT_PAYLOAD.workflow }} in {{ EVENT_PAYLOAD.repository.full_name }}.'
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}