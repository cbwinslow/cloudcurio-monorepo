# GitLab CI/CD Configuration for CloudCurio

stages:
  - test
  - build
  - scan
  - release

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"

# Global cache
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .venv/
    - node_modules/

before_script:
  - python --version
  - pip install --upgrade pip
  - pip install virtualenv

.test_template: &test_definition
  stage: test
  script:
    - python -m venv .venv
    - source .venv/bin/activate
    - pip install -r crew/requirements.txt
    - pip install -r config_editor/requirements.txt
    - pip install pytest pytest-cov
    - pytest tests/ -v --cov=.
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

unit_test:
  <<: *test_definition
  stage: test

integration_test:
  <<: *test_definition
  stage: test
  script:
    - python -m venv .venv
    - source .venv/bin/activate
    - pip install -r crew/requirements.txt
    - pip install -r config_editor/requirements.txt
    - pip install pytest pytest-cov
    - pytest tests/integration/ -v

.security_scan_template: &security_scan_definition
  stage: scan
  script:
    - pip install bandit safety
    - bandit -r . -f json -o bandit-report.json || true
    - safety check -r crew/requirements.txt --json > safety-report.json || true
  artifacts:
    reports:
      dependency_scanning: safety-report.json
      sast: bandit-report.json

security_scan:
  <<: *security_scan_definition

.build_template: &build_definition
  stage: build
  script:
    - python -m venv .venv
    - source .venv/bin/activate
    - pip install build twine
    - python -m build
  artifacts:
    paths:
      - dist/
    expire_in: 1 week

build_pip_package:
  <<: *build_definition

build_docker_image:
  stage: build
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_TLS_CERTDIR: ""
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -f Dockerfile.mcp -t $CI_REGISTRY_IMAGE/mcp:$CI_COMMIT_SHA .
    - docker tag $CI_REGISTRY_IMAGE/mcp:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/mcp:latest
    - docker push $CI_REGISTRY_IMAGE/mcp:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/mcp:latest
  only:
    - main
    - tags

# Release stage - only runs on tagged commits
release:
  stage: release
  script:
    - echo "Creating release for version ${CI_COMMIT_TAG}"
    - echo "Release assets would be uploaded here"
  only:
    - tags